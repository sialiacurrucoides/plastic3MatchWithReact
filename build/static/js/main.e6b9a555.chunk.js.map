{"version":3,"sources":["components/Messages/Messages.module.scss","components/GameField/Tile/Tile.module.scss","components/Header/Badges/Badges.module.scss","App.module.scss","components/Plastic3match/Plastic3Match.module.scss","components/Header/Header.module.scss","components/Header/DisplayScore/DisplayScore.module.scss","components/Header/DisplayRecord/DisplayRecord.module.scss","components/Header/Timer/Timer.module.scss","components/Header/Goal/Goal.module.scss","components/GameField/GameField.module.scss","components/Messages/Buttons/AgainButton.module.scss","components/Messages/Buttons/GoButton.module.scss","components/Messages/MessageCanvas/MessageCanvas.module.scss","components/VideoBackground/VideoBackground.module.scss","reportWebVitals.js","constants/constants.js","store/index.js","components/Header/DisplayScore/DisplayScore.js","components/Header/DisplayRecord/DisplayRecord.js","components/Header/Timer/Timer.js","components/Header/Goal/Goal.js","components/Header/Badges/Badges.js","components/Header/Header.js","components/GameField/utils/shuffle.js","components/GameField/constants/constants.js","components/GameField/utils/generateList.js","components/GameField/utils/calcNrOfEachPlasticTypes.js","components/GameField/utils/updateField.js","components/GameField/Tile/constants/constants.js","components/GameField/Tile/utils/calcNewPosition.js","components/GameField/Tile/Tile.js","components/GameField/utils/calcTilePosition.js","components/GameField/utils/detectPatterns.js","components/GameField/utils/sumPoints.js","components/Messages/Buttons/AgainButton.js","components/Messages/Buttons/GoButton.js","components/Messages/MessageCanvas/MessageCanvas.js","components/Messages/Messages.js","components/GameField/ShowMessage/ShowMessage.js","components/GameField/GameField.js","components/Plastic3match/Plastic3Match.js","components/VideoBackground/VideoBackground.js","App.js","index.js"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","canvasTypes","techScoreGoals","nonrecyclablePlasticInx","badges","map","el","initialState","isOn","canvasToShow","removablePlasticList","isPaused","generalStateSlice","createSlice","name","reducers","startGame","state","stopGame","togglePause","updateCanvas","action","payload","addRemovablePlastic","push","resultsSlice","score","record","increaseScore","resetScore","updateRecord","badgesSlice","level","addBadge","levelUp","reset","store","configureStore","reducer","results","general","resultsActions","actions","badgesActions","generalStateActions","DisplayScore","useSelector","dispatch","useDispatch","className","styles","container","DisplayRecord","defaultDisplay","Timer","useState","remainingTime","setRemainingTime","isOver","setIsOver","isGameOn","useEffect","length","prevTime","timeLimit","timer","setInterval","clearInterval","minutes","Math","floor","seconds","displayTime","Goal","Badges","achievedBadges","badgeSeries","badge","includes","highlighted","Header","header","shuffle","list","positionToSwitch","x","currPosition","random","nrOfColumns","nrElements","nrPlastic","plastic_freqs","tileStates","plasticNrPerType","elemNrArray","forEach","curr","elemNr","sumElem","reduce","prev","cur","i","myrand","calcNrOfEachPlasticTypes","generateList","howMany","fieldElems","j","index","position","value","pointValue","aboutToMove","calcInheritedPosition","tilesToRemoveFromRelevantColumn","tile","patternLens","removeTiles","diffs","pos","patternLengths","acc","currIndex","indexOf","patternLengthsInColumn","counter","positionShift","inheritedTilePosition","calcNewField","field","toRemoveByColumn","positionsToRemove","columnsToModify","col","max","inheritTilePosition","upperValue","find","provideUpperTileOrRandom","updateField","Array","findAlready","activateSwitch","calcNewPosition","diffX","diffY","abs","newPosition","Tile","tileValue","tileState","onSwitch","transformAmount","setTransformAmount","currentCoordinates","setCurrentCoordinates","tileKey","setTileKey","fromTop","rowNr","calcTileFromTop","fromLeft","nodeRef","React","useRef","classes","fading","enterAnimation","onStart","event","pageX","pageY","onDrag","onStop","ref","style","top","left","transform","backgroundImage","calculatePointValue","hasLeftMatch","hasRightMatch","hasAboveMatch","hasBelowMatch","has2LeftMatch","has2RightMatch","has2AboveMatch","has2BelowMatch","detectPatterns","plasticTile","sumPoints","AgainButton","onClick","againButton","GoButton","goButton","MessageCanvas","children","canvas","tips","Introduction1","intro1","console","log","Introduction2","intro2","stepsAnimation","src","alt","Introduction3","intro3","nextGoal","tech","activatedTech","StartGame","textCenter","id","hourGlass","GameOver","gameOver","Congratualtion","congrat","class","PopUpTechSelection","handleSelection","newTech","Number","target","dataset","popUpTech","plasticInx","selectTechButton","data-id","ShowMessage","generateField","initialField","GameField","setField","handlePositionSwitch","prevPosition","switchTile","currTile","handleChange","setTimeout","points","gameField","onMouseUp","Plastic3Match","gameBoard","VideoBackground","myVideo","width","height","playing","muted","loop","url","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6b9a555.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Messages_textCenter__IhmWW\",\"startGame\":\"Messages_startGame__38DHC\",\"intro1\":\"Messages_intro1__bNcm1\",\"intro2\":\"Messages_intro2__3wA8E\",\"intro3\":\"Messages_intro3__3YdnS\",\"hourGlass\":\"Messages_hourGlass__37Y2T\",\"rotating\":\"Messages_rotating__1hxmM\",\"nextGoal\":\"Messages_nextGoal__3qLoF\",\"tech\":\"Messages_tech__121QZ\",\"activatedTech\":\"Messages_activatedTech__3wuoV\",\"stepsAnimation\":\"Messages_stepsAnimation__1TLp8\",\"tile\":\"Messages_tile__2iYpH\",\"congrat\":\"Messages_congrat__17gVo\",\"gameOver\":\"Messages_gameOver__106qe\",\"popUpTech\":\"Messages_popUpTech__YLa1H\",\"selectTechButton\":\"Messages_selectTechButton__2Qyo5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"Tile_tile__nO-mS\",\"enterAnimation\":\"Tile_enterAnimation__1hqbn\",\"enter\":\"Tile_enter__3kC56\",\"highlighted\":\"Tile_highlighted__FF8rM\",\"fading\":\"Tile_fading__iCHjS\",\"fade\":\"Tile_fade__2lfK6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Badges_container__2vFM1\",\"badgeSeries\":\"Badges_badgeSeries__3AjYw\",\"highlighted\":\"Badges_highlighted__1Kmqe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBoard\":\"Plastic3Match_gameBoard__3BJdo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DisplayScore_container__3I99P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DisplayRecord_container__L-2dI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Timer_container__1rGtN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Goal_container__3hkaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameField\":\"GameField_gameField__cza5h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"againButton\":\"AgainButton_againButton__nQXo1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"goButton\":\"GoButton_goButton__2syLH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"MessageCanvas_canvas__pTALd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myVideo\":\"VideoBackground_myVideo__3L7I5\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const canvasTypes = {\n    intro1: 'intro1',\n    intro2: 'intro2',\n    intro3: 'intro3',\n    startGame: 'startGame',\n    gameOver: 'gameOver',\n    selectTech: 'selectTech',\n    congrat: 'congrat'\n};\n\nexport const timeLimit = 1; // 4 minutes\nexport const techScoreGoals = [20, 60, 100, 9999]; // [70, 170, 300, 9999];\nexport const nonrecyclablePlasticInx = [2,5,6]; \nexport const recyclablePlasticInx = [0,1,3,4];\nexport const badges = nonrecyclablePlasticInx.map(el => el + 1);","import { createSlice, configureStore } from '@reduxjs/toolkit';\nimport { canvasTypes, recyclablePlasticInx } from '../constants/constants';\n\nconst initialState = {\n    isOn: false, \n    canvasToShow: canvasTypes.intro1,\n    removablePlasticList: recyclablePlasticInx,\n    isPaused: false\n};\n\nconst generalStateSlice = createSlice({\n    name: 'generalState',\n    initialState,\n    reducers: {\n        startGame(state){\n            state.isOn = true;\n        },\n        stopGame(state){\n            state.isOn = false;\n        },\n        togglePause(state){\n            state.isPaused = !state.isPaused;\n        },\n        updateCanvas(state, action){\n            state.canvasToShow = action.payload;\n        },\n        addRemovablePlastic(state, action){\n            state.removablePlasticList.push(action.payload);\n        }\n    }\n});\n\nconst initialScoreState = {score: 0, record: 0};\n\nconst resultsSlice = createSlice({\n    name: 'results',\n    initialState: initialScoreState,\n    reducers: {\n        increaseScore(state, action){\n            state.score += action.payload;\n        },\n        resetScore(state){\n            state.score = 0;\n        },\n        updateRecord(state, action){\n            state.record = action.payload;\n        }\n    }\n});\n\nconst initalBadgesState = {badges: [], level: 0};\n\nconst badgesSlice = createSlice({\n    name: 'badges',\n    initialState: initalBadgesState,\n    reducers: {\n        addBadge(state, action){\n            state.badges.push(action.payload);\n        },\n        levelUp(state){\n            state.level += 1;\n        },\n        reset(state){\n            state.level = 0;\n            state.badges = [];\n        }\n    }\n\n});\n\nconst store = configureStore({\n    reducer: {\n        results: resultsSlice.reducer,\n        badges: badgesSlice.reducer,\n        general: generalStateSlice.reducer,\n    }\n});\n\nexport const resultsActions = resultsSlice.actions;\nexport const badgesActions = badgesSlice.actions;\nexport const generalStateActions = generalStateSlice.actions;\n\nexport default store;","import { useSelector, useDispatch } from 'react-redux';\nimport styles from './DisplayScore.module.scss';\nimport { resultsActions, badgesActions, generalStateActions } from '../../../store/index';\nimport { techScoreGoals, canvasTypes } from '../../../constants/constants';\n\nconst DisplayScore = () => {\n    const score = useSelector(state => state.results.score);\n    const record = useSelector(state => state.results.record);\n    const level = useSelector(state => state.badges.level);\n    const dispatch = useDispatch();\n\n    if (score > record) dispatch(resultsActions.updateRecord(score));\n    if (score >= techScoreGoals[level]) {\n        dispatch(badgesActions.levelUp());\n        dispatch(generalStateActions.updateCanvas(canvasTypes.selectTech));\n        dispatch(generalStateActions.togglePause());\n    };\n\n    return (<div className={styles.container}>\n                <span>Score</span>\n                <span>{score}</span>\n            </div>);\n};\n\nexport default DisplayScore;","import { useSelector } from 'react-redux';\nimport styles from './DisplayRecord.module.scss';\n\n\nconst DisplayRecord = () => {\n    const record = useSelector(state => state.results.record);\n\n    return (<div className={styles.container}>\n                <span>Record</span>\n                <span>{record}</span>\n            </div>);\n};\n\nexport default DisplayRecord;","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from './Timer.module.scss';\nimport { timeLimit } from '../../../constants/constants';\nimport { generalStateActions } from '../../../store/index';\nimport { nonrecyclablePlasticInx } from '../../../constants/constants';\n\nconst defaultDisplay = '- : --';\nconst step = 1000; // ms\nconst displayTime = (prevTime) => {\n    const minutes = Math.floor(prevTime / (1000*60));\n    const seconds = minutes > 0 ? (prevTime/1000) % (minutes*60): prevTime/1000;\n    return `${minutes}:${seconds}`;\n}\n\nconst Timer = () => {\n    const [remainingTime, setRemainingTime] = useState(defaultDisplay);\n    const [isOver, setIsOver] = useState(false);\n    const isGameOn = useSelector(state => state.general.isOn);\n    const badges = useSelector(state => state.badges.badges);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isOver){\n            if (badges.length === nonrecyclablePlasticInx.length){\n                dispatch(generalStateActions.updateCanvas('congrat'));\n            } else {\n                dispatch(generalStateActions.updateCanvas('gameOver'));\n            }\n        }\n    }, [isOver, badges, dispatch]);\n\n    useEffect(() => {\n        \n        if (isGameOn) {\n            let prevTime = timeLimit*60*1000;\n            const timer = setInterval(() => {\n                \n                if (prevTime === 0) {\n                    clearInterval(timer);\n                    dispatch(generalStateActions.stopGame());\n                    setIsOver(true);\n                    // dispatch(generalStateActions.updateCanvas('gameOver'));\n                    // if (badges.length === nonrecyclablePlasticInx.length){\n                    //     dispatch(generalStateActions.updateCanvas('congrat'));\n                    // } else {\n                    //     dispatch(generalStateActions.updateCanvas('gameOver'));\n                    // }\n                    \n                } else {\n                    setRemainingTime(displayTime(prevTime));\n                    prevTime -= step;\n                }\n                \n            },step);\n        } else {\n            setRemainingTime(defaultDisplay);\n            \n        }\n    }, [isGameOn, dispatch]);\n\n    return (\n        <div className={styles.container}>\n            <span>Time</span>\n            <span>{remainingTime}</span>\n        </div>\n    );\n};\n\nexport default Timer;","import { useSelector } from 'react-redux';\nimport styles from './Goal.module.scss';\nimport { techScoreGoals } from '../../../constants/constants';\n\nconst Goal = () => {\n    const level = useSelector(state => state.badges.level);\n\n    return (\n        <div className={styles.container}>\n            <span>Goal</span>\n            <span>{techScoreGoals[level]}</span>\n        </div>\n    );\n};\n\nexport default Goal;","import { useSelector } from 'react-redux';\nimport styles from './Badges.module.scss';\nimport { badges } from '../../../constants/constants';\n\nconst Badges = () => {\n    const achievedBadges = useSelector(state => state.badges.badges)\n\n    return (\n        <div className={styles.container}>\n            <span>Badges</span>\n            <span className={styles.badgeSeries}>\n                {badges.map(badge => {\n                return (\n                <span key={`badge${badge}`} className={achievedBadges.includes(badge) ? styles.highlighted : ''}>\n                    {badge}\n                    </span>);\n            })}</span>\n        </div>\n    );\n};\n\nexport default Badges;","import styles from './Header.module.scss';\nimport DisplayScore from './DisplayScore/DisplayScore';\nimport DisplayRecord from './DisplayRecord/DisplayRecord';\nimport Timer from './Timer/Timer';\nimport Goal from './Goal/Goal';\nimport Badges from './Badges/Badges';\n\nconst Header = () => {\n    return (<div className={styles.header}>\n                <Timer />\n                <DisplayScore />\n                <Goal />\n                <Badges />\n                <DisplayRecord />\n            </div>);\n};\n\nexport default Header;","export const shuffle = (list) => {\n    let positionToSwitch, x, currPosition;\n    \n    for (currPosition = list.length - 1; currPosition > 0; currPosition--) {\n        positionToSwitch = Math.floor(Math.random() * (currPosition + 1));\n        x = list[currPosition];\n        list[currPosition] = list[positionToSwitch];\n        list[positionToSwitch] = x;\n    }\n    return list;\n};","export const nrOfColumns = 10;\nexport const nrOfRows = 10;\nexport const nrElements = nrOfColumns*nrOfRows;\nexport const tips = [\n    \"7 stands for 'other types' of plastic\",\n    \"Metalized films usually cannot be recycled even if the plastic type is PP.\",\n    \"You can use reusable bags for buying fruits and vegetables.\",\n    \"Buying from the local market is more eco-friendly.\"\n];\nexport const recyclablePlastic = [0, 1, 3, 4]; //1,2,4,5 but the numbering starts at 0\nexport const nonrecyclablePlastic = [2, 5, 6]; //corresponds to 3, 6, 7\nexport const nrPlastic = recyclablePlastic.length + nonrecyclablePlastic.length;\nexport const techScoreGoals = [70, 170, 300, 999, 9999];\nexport const timeLimit = 4 * 60 * 1000; // 4 minutes\nexport const plastic_freqs = [1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7];\nexport const tileStates = ['normal', 'highlighted', 'shrinking'];","import { shuffle } from './shuffle';\nimport { calcNrOfEachPlasticTypes } from './calcNrOfEachPlasticTypes';\n\nconst plasticNrPerType = calcNrOfEachPlasticTypes();\n\nexport const generateList = (howMany = plasticNrPerType) => {\n    let fieldElems = [];\n    for (let i = 0; i < howMany.length; i++) {\n        for (let j = 0; j < howMany[i]; j++) {\n            fieldElems.push(i);\n        }\n    }\n    fieldElems = shuffle(fieldElems);\n \n    return fieldElems.map((el, index) => ({position:index, value: el, pointValue: 0, aboutToMove: 0}));\n};","import { plastic_freqs, nrElements, nrPlastic } from '../constants/constants';\n\nexport const calcNrOfEachPlasticTypes = () => {\n    let elemNrArray = [];\n    plastic_freqs.forEach((curr) => {\n        let elemNr = Math.floor(curr * nrElements);\n        elemNrArray.push(elemNr);\n    });\n    const sumElem = elemNrArray.reduce((prev, cur) => prev + cur);\n    if (sumElem < nrElements) {\n        for (let i = 0; i < (nrElements - sumElem); i++) {\n            const myrand = Math.floor(Math.random() * nrPlastic);\n            elemNrArray[myrand]++; // increase the number of displayed plastic of the selected plastic type\n        }\n    }\n    return elemNrArray;\n};","import { nrOfColumns } from '../constants/constants';\n\nexport const patternLengthsInColumn = (removeTiles) => {\n    const diffs = removeTiles.map((pos, index) => removeTiles[index-1] ? pos - removeTiles[index-1] : nrOfColumns);\n    \n    // [10,10,30,10,10] -> index 2 indicates, the first group has two elements\n    let patternLengths = diffs.reduce((acc, curr) => {\n        if (curr !== nrOfColumns){\n            const currIndex = diffs.indexOf(curr);\n            if (acc.length === 0) return [currIndex];\n            return [...acc, currIndex - acc[acc.length - 1]];\n        }\n        return acc;\n    }, []); \n    patternLengths.push(removeTiles.length - patternLengths.reduce((acc, curr) => acc + curr, 0));\n    \n    return patternLengths;\n};\n\nconst provideUpperTileOrRandom = (position, inheritTilePosition, field) => {\n    \n    const upperValue = field.find(el => el.position === inheritTilePosition);\n    if (upperValue) return ({\n        ...upperValue,\n        position: position,\n        aboutToMove: upperValue.aboutToMove + 1\n    });\n    return ({\n        position: position,\n        value: Math.floor(Math.random()*7),\n        pointValue: 0,\n        aboutToMove: Math.random()\n    });\n};\n\nexport const calcInheritedPosition = (tilesToRemoveFromRelevantColumn, tile) => {\n    const patternLens = patternLengthsInColumn(tilesToRemoveFromRelevantColumn);\n    \n    let counter = 1;\n    let positionShift = patternLens[patternLens.length - counter];\n    let inheritedTilePosition = tile.position - nrOfColumns*positionShift;\n    while (tilesToRemoveFromRelevantColumn.includes(inheritedTilePosition)){\n        counter += 1;\n        positionShift = positionShift + patternLens[patternLens.length - counter];\n        inheritedTilePosition = tile.position - nrOfColumns*positionShift;\n    }\n    return inheritedTilePosition;\n}\n\nconst calcNewField = (field, toRemoveByColumn, positionsToRemove) => {\n\n    const columnsToModify = positionsToRemove.map(pos => pos%nrOfColumns);\n\n    return field.map(tile => {\n\n        const col = tile.position%nrOfColumns;\n        const tilesToRemoveFromRelevantColumn = toRemoveByColumn[col];\n\n        if (positionsToRemove.includes(tile.position) || \n        (columnsToModify.includes(col) && Math.max(...tilesToRemoveFromRelevantColumn) > tile.position)) {\n\n            const inheritedTilePosition = calcInheritedPosition(tilesToRemoveFromRelevantColumn, tile);\n\n            return provideUpperTileOrRandom(tile.position, inheritedTilePosition, field);\n        }\n        return tile;\n    });\n};\n\n\nexport const updateField = (field, removablePlasticList) => {\n    const toRemoveByColumn = new Array(nrOfColumns);\n\n    const positionsToRemove = field.reduce((acc, curr) => {\n        if (curr.pointValue > 0 && removablePlasticList.includes(curr.value)) {\n            const findAlready = toRemoveByColumn[curr.position%nrOfColumns] ? toRemoveByColumn[curr.position%nrOfColumns] : [];\n            toRemoveByColumn[curr.position%nrOfColumns] = [...findAlready, curr.position];\n            return [...acc, curr.position];\n        }\n        return acc;\n    }, []);\n    \n    const newField = calcNewField(field, toRemoveByColumn, positionsToRemove);\n\n    return newField;\n};\n","export const moveLimit = \"40\"; // px\nexport const activateSwitch = \"28\"; ","import { moveLimit, activateSwitch } from \"../constants/constants\";\nimport { nrOfColumns, nrElements } from \"../../constants/constants\";\n\nconst calcNewPosition = (diffX, diffY, position) => {\n    if (Math.abs(diffX > moveLimit || diffY > moveLimit)){\n        return position;\n    }\n    let newPosition;\n    if (Math.abs(diffX) > activateSwitch && diffX > 0) newPosition = (position - 1);\n    if (Math.abs(diffX) > activateSwitch && diffX < 0) newPosition = (position + 1);\n    if (Math.abs(diffY) > activateSwitch && diffY > 0) newPosition = (position - nrOfColumns);\n    if (Math.abs(diffY) > activateSwitch && diffY < 0) newPosition = (position + nrOfColumns);\n\n    if (newPosition >= 0 && newPosition < nrElements) return newPosition;\n    return position;\n};\n\nexport default calcNewPosition;","import React, {useState, useEffect} from 'react';\nimport { calcTileFromTop, calcTileFromLeft } from '../utils/calcTilePosition';\nimport styles from './Tile.module.scss';\nimport { tileStates } from '../constants/constants';\nimport {DraggableCore} from 'react-draggable';\nimport calcNewPosition from './utils/calcNewPosition';\n\nconst Tile = ({tileValue, position, tileState, onSwitch, aboutToMove}) => {\n\n    const [transformAmount, setTransformAmount] =useState(`translate(0px,0px)`);\n    const [currentCoordinates, setCurrentCoordinates] = useState([null, null]);\n    const [tileKey, setTileKey] = useState(`${tileValue}`);\n\n    const fromTop = calcTileFromTop(position);\n    const fromLeft = calcTileFromLeft(position);\n    \n    const nodeRef = React.useRef(null);\n\n\n    const handleDragStart = (event) => {\n        setCurrentCoordinates([event.pageX, event.pageY]);\n    };\n\n    const handleDrag = (event) => {\n        const diffX = event.pageX - currentCoordinates[0];\n        const diffY = event.pageY - currentCoordinates[1];\n\n        setTransformAmount(`translate(${diffX}px, ${diffY}px)`);\n    };\n\n    const handleDragStop = (event) => {\n        const diffX = currentCoordinates[0] - event.pageX;\n        const diffY = currentCoordinates[1] - event.pageY;\n        const newPosition = calcNewPosition(diffX, diffY, position);\n        \n        if (newPosition !== position){\n            onSwitch(position, newPosition);\n        }\n        setTransformAmount(`translate(0px,0px)`);\n    };\n\n    const classes = tileState === tileStates[2] ? `${styles.tile} ${styles.fading} ${styles.enterAnimation}`: `${styles.tile} ${styles.enterAnimation}`;\n    \n    useEffect(() => {\n        setTileKey(prev => (`${prev}ch`))\n    }, [aboutToMove]);\n    \n    return (<DraggableCore\n            nodeRef={nodeRef}\n            onStart={handleDragStart}\n            onDrag={handleDrag}\n            onStop={handleDragStop}\n            >\n            <div className={classes}\n                key={tileKey}\n                ref={nodeRef}\n                style={{top: fromTop, left: fromLeft, transform: transformAmount, backgroundImage: `url(\"imgs/icon_${tileValue + 1}.png\")`}}\n                // onClick={handleTileClick}\n                >\n            </div>\n            </DraggableCore>\n            );\n};\n\nexport default Tile;","import { nrOfColumns } from '../constants/constants';\n\nconst tileRelativeWidth = 9.5;\nconst marginWidth = (nrOfColumns - tileRelativeWidth)*nrOfColumns/2;\n\nexport const calcTileFromTop = (index) => {\n    const rowNr = Math.floor(index/nrOfColumns);\n    return `${rowNr*tileRelativeWidth + marginWidth}%`;\n};\nexport const calcTileFromLeft = (index) => {\n    const colNr = index%nrOfColumns;\n    return `${colNr*tileRelativeWidth + marginWidth}%`;\n};","import { nrElements, nrOfColumns} from '../constants/constants';\n\n\nconst calculatePointValue = (list, index) => {\n\n    const hasLeftMatch = (index -1 >= 0) && index%nrOfColumns !== 0 && list[index].value === list[index - 1].value;\n    const hasRightMatch = (index + 1 < nrElements) && (index+1)%nrOfColumns !== 0 && list[index].value === list[index + 1].value;\n    const hasAboveMatch = (index - nrOfColumns >= 0) && list[index].value === list[index - nrOfColumns].value;\n    const hasBelowMatch = (index + nrOfColumns < nrElements) && list[index].value === list[index + nrOfColumns].value;\n\n    if (!hasRightMatch && !hasLeftMatch && !hasAboveMatch && !hasBelowMatch) return 0;\n\n    // the tile two steps apart should have a position between 0-99 and should not be in a new line\n    const has2LeftMatch = (index -2 >= 0) && index%nrOfColumns !== 0 && (index - 2 + 1)%nrOfColumns !== 0 && hasLeftMatch && list[index].value === list[index - 2].value;\n    const has2RightMatch = (index + 2 < nrElements) && (index+2)%nrOfColumns !== 0 && hasRightMatch && list[index].value === list[index + 2].value;\n    const has2AboveMatch = (index - 2*nrOfColumns >= 0) && hasAboveMatch && list[index].value === list[index - 2*nrOfColumns].value;\n    const has2BelowMatch = (index + 2*nrOfColumns < nrElements) && hasBelowMatch && list[index].value === list[index + 2*nrOfColumns].value;\n\n\n    if ((has2AboveMatch && has2BelowMatch) || \n    (has2LeftMatch && has2RightMatch) || \n    (has2LeftMatch && has2AboveMatch) || \n    (has2AboveMatch && has2RightMatch) ||\n    (has2RightMatch && has2BelowMatch) || \n    (has2BelowMatch && has2LeftMatch)) {\n        return 3;\n    }\n\n    if ((hasLeftMatch && has2RightMatch) || \n    (hasRightMatch && has2LeftMatch) ||\n    (hasAboveMatch && has2BelowMatch) || \n    (hasBelowMatch && has2AboveMatch)) {\n        return 2;\n    }\n\n    if ((!hasLeftMatch && has2RightMatch) || \n    (!hasRightMatch && has2LeftMatch) || \n    (!hasAboveMatch && has2BelowMatch) || \n    (!hasBelowMatch && has2AboveMatch) ||\n    (hasRightMatch && hasLeftMatch) || \n    (hasAboveMatch && hasBelowMatch)) {\n        return 1;\n    }\n\n\n\n\n\n    return 0;\n\n};\n\nconst detectPatterns = (list) => {\n\n    const newList = list.map((plasticTile, index) => ({\n        ...plasticTile,\n        pointValue: calculatePointValue(list, index),\n    }));\n    return newList;\n};\n\nexport default detectPatterns;","\nconst sumPoints = (list,removablePlasticList) => {\n    return list.reduce((acc, curr) => {\n        if (curr.pointValue > 0 && removablePlasticList.includes(curr.value)) return acc + curr.pointValue;\n        return acc;\n    }, 0)\n};\n\nexport default sumPoints;","import styles from './AgainButton.module.scss';\n\nconst AgainButton = ({onClick}) => {\n    return (\n        <div className={styles.againButton} onClick={onClick}>\n            Play again!\n        </div>\n    );\n};\n\nexport default AgainButton;","import styles from './GoButton.module.scss';\n\nconst GoButton = ({onClick}) => {\n    return (\n        <div className={styles.goButton} onClick={onClick}>GO</div>\n    );\n};\n\nexport default GoButton;","import styles from './MessageCanvas.module.scss';\n\nconst MessageCanvas = ({children}) => {\n    return (<div className={styles.canvas}>\n                {children}\n            </div>);\n};\n\nexport default MessageCanvas;","import styles from './Messages.module.scss';\nimport AgainButton from './Buttons/AgainButton';\nimport GoButton from './Buttons/GoButton';\nimport MessageCanvas from './MessageCanvas/MessageCanvas';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { generalStateActions, resultsActions, badgesActions } from '../../store/index';\nimport { canvasTypes, timeLimit, nonrecyclablePlasticInx } from '../../constants/constants';\n\nconst tips = [\n    \"7 stands for 'other types' of plastic\",\n    \"Metalized films usually cannot be recycled even if the plastic type is PP.\",\n    \"You can use reusable bags for buying fruits and vegetables.\",\n    \"Buying from the local market is more eco-friendly.\"\n];\n\nexport const Introduction1 = () => {\n    const dispatch = useDispatch();\n\n    const handleClick = () => {console.log(\"clicked\");\n        dispatch(generalStateActions.updateCanvas(canvasTypes.intro2));\n    };\n\n    return (\n        <MessageCanvas>\n            <div className={styles.intro1}>\n                <h3 >Welcome to Plastic3match!</h3>\n                <p >A three-match game where you cannot make the non-recyclable plastic pieces disappear.</p><br />\n                <p >Unless... You develop new technologies.</p>\n               <GoButton onClick={handleClick}/>\n            </div>\n        </MessageCanvas>\n    );\n};\nexport const Introduction2 = () => {\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch(generalStateActions.updateCanvas(canvasTypes.intro3));\n    };\n    return (\n        <MessageCanvas>\n            <div className={styles.intro2}>\n                <p className=\"text-center intro p-3\">Switch <strong>ANY</strong> adjacent pieces!</p>\n                <div className={styles.stepsAnimation}>\n                    <div className={styles.tile}>\n                        <img src=\"imgs/icon_1.png\" alt=\"plastic-1\" /><i className='fas fa-arrows-alt-h arrow'></i><img src=\"imgs/icon_2.png\" alt=\"plastic-2\" /><img src=\"imgs/icon_1.png\" alt=\"plastic-1\" /><img src=\"imgs/icon_1.png\" alt=\"plastic-1\" />\n                    </div>\n                    <div className={styles.tile}>\n                        <img src=\"imgs/icon_2.png\" alt=\"plastic-2\" /><img src=\"imgs/icon_1.png\" alt=\"plastic-1\" /><img src=\"imgs/icon_1.png\" alt=\"plastic-1\" /><img src=\"imgs/icon_1.png\" alt=\"plastic-1\" />\n                    </div>\n                    <div className={styles.tile}>\n                        <img src=\"imgs/icon_2.png\" alt=\"plastic-2\" /><img src=\"imgs/icon_5.png\" alt=\"plastic-5\" /><img src=\"imgs/icon_3.png\" alt=\"plastic-3\" /><img src=\"imgs/icon_4.png\" alt=\"plastic-4\" />\n                    </div>\n                </div>\n                <p>...by clicking on each or by dragging one </p>\n                <GoButton onClick={handleClick}/>\n            </div>\n        </MessageCanvas>\n    );\n};\nexport const Introduction3 = () => {\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch(generalStateActions.updateCanvas(canvasTypes.startGame));\n    };\n    return (\n        <MessageCanvas>\n            <div className={styles.intro3}>\n                <p>\n                    Aim for the next goal: <span className={styles.nextGoal}> 70</span>\n                </p>\n                <p>\n                    reaching the goal allows you to develop <em>new</em> technologies to deal with non-recyclable plastic types:\n                </p>\n                <p>\n                    <span className={`${styles.tech} ${styles.activatedTech}`}>3</span>\n                    <span className={`${styles.tech} ${styles.activatedTech}`}>6</span>\n                    <span className={`${styles.tech} ${styles.activatedTech}`}>7</span>\n                </p>\n                <br />\n                <p>then you can <em>eliminate</em> the given number/plastic type!</p>\n                <GoButton onClick={handleClick}/>\n            </div>\n        </MessageCanvas>\n    );\n};\n\nexport const StartGame = () => {\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch(generalStateActions.startGame());\n    }\n\n    return (\n        <MessageCanvas>\n            <div className={styles.startGame}>\n                <p className={styles.textCenter}>You WIN if less than 10 remained from 3/6/7!</p>\n                <p>We, like Earth as we know it, are running ouf time...</p>\n                <p>You've got <strong id=\"timeLimit\">{timeLimit}</strong> minutes to develop a new tech!</p>\n                <div className={styles.hourGlass}>\n                    <i className=\"fa fa-hourglass-2\"></i>                   \n                </div>\n                <GoButton onClick={handleClick}/>\n            </div>\n        </MessageCanvas>\n    );\n};\n\nexport const GameOver = () => {\n\n    const score = useSelector(state => state.results.score);\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch(resultsActions.resetScore());\n        dispatch(badgesActions.reset());\n        dispatch(generalStateActions.startGame());\n    };\n\n    return (\n        <MessageCanvas>\n            <div className={styles.gameOver}>\n                <p className={styles.textCenter} id=\"over\">GAME OVER</p><br />\n                <p className={styles.textCenter}>Your score: <span>{score}</span></p>\n                <AgainButton onClick={handleClick}/>\n            </div>\n        </MessageCanvas>\n    );\n};\n\nexport const Congratualtion = () => {\n\n    const score = useSelector(state => state.results.score);\n    const dispatch = useDispatch();\n\n    const handleClick = () => {\n        dispatch(badgesActions.reset());\n        dispatch(resultsActions.resetScore());\n        dispatch(generalStateActions.startGame());\n    };\n\n    return (\n        <MessageCanvas>\n            <div className={styles.congrat}>\n                <p className={styles.textCenter}>Amazing! You win. Keep this enthusiasm!</p><br />\n                <img src=\"imgs/gray-and-green-turtle.jpg\" alt=\"turtle\"></img>\n                <p className={styles.textCenter}>Your score: <span class=\"finalScore\">{score}</span></p>\n                <AgainButton onClick={handleClick}/>\n                <p >Did you know? <span>{tips[Math.floor(Math.random() * tips.length)]}</span></p>\n            </div>\n        </MessageCanvas>\n    );\n};\n\nexport const PopUpTechSelection = () => {\n    const dispatch = useDispatch();\n\n    const handleSelection = (event) => {\n        const newTech = Number(event.target.dataset.id);\n       \n        dispatch(generalStateActions.addRemovablePlastic(newTech));\n        dispatch(badgesActions.addBadge(newTech + 1));\n        dispatch(generalStateActions.togglePause());\n    };\n\n    return (\n        <MessageCanvas>\n            <div className={styles.popUpTech}>\n                <p >Great work! Choose one type that you can handle from now on.</p><br />\n                {nonrecyclablePlasticInx.map(plasticInx => \n                    <div \n                    className={styles.selectTechButton} \n                    key={`select${plasticInx + 1}`} \n                    onClick={handleSelection} \n                    data-id={plasticInx}>\n                        {`Create Tech ${plasticInx + 1}`}\n                    </div>)}\n\n            </div>\n        </MessageCanvas>\n    );\n};","import { useSelector } from 'react-redux';\n\nimport * as Messages from '../../Messages/Messages';\nimport { canvasTypes } from '../../../constants/constants';\n\n\nconst ShowMessage = () => {\n    const state = useSelector(state => state.general.canvasToShow);\n\n    switch (state){\n        case canvasTypes.intro1:\n            return <Messages.Introduction1 />;\n        case canvasTypes.intro2:\n            return <Messages.Introduction2 />;\n        case canvasTypes.intro3:\n            return <Messages.Introduction3 />;\n        case canvasTypes.startGame:\n            return <Messages.StartGame />;\n        case canvasTypes.gameOver:\n            return <Messages.GameOver />;\n        case canvasTypes.congrat:\n            return <Messages.Congratualtion />;\n        case canvasTypes.selectTech:\n            return <Messages.PopUpTechSelection />;\n        default: return null;\n    }\n};\n\nexport default ShowMessage;","import React, {useState, useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport styles from './GameField.module.scss';\nimport { generateList } from './utils/generateList';\nimport { updateField } from './utils/updateField';\nimport Tile from './Tile/Tile';\nimport { tileStates } from './constants/constants';\nimport detectPatterns from './utils/detectPatterns';\nimport sumPoints from './utils/sumPoints';\nimport { resultsActions } from '../../store/index';\nimport ShowMessage from './ShowMessage/ShowMessage';\n\nconst generateField = (removablePlasticList) => {\n    let initialField = generateList();\n    while (Number(sumPoints(detectPatterns(initialField), removablePlasticList)) !== 0){\n        initialField = generateList();\n    }\n    return initialField;\n};\n\nconst GameField = () => {\n    const removablePlasticList = useSelector(state => state.general.removablePlasticList);\n    const initialField = generateField(removablePlasticList);\n    const [field, setField] = useState(initialField);\n    const dispatch = useDispatch();\n    const isGameOn = useSelector(state => state.general.isOn);\n    const isPaused = useSelector(state => state.general.isPaused);\n\n\n\n    const handlePositionSwitch = (prevPosition, newPosition) => {\n        const switchTile = field.find(tile => tile.position === newPosition);\n        const currTile = field.find(tile => tile.position === prevPosition);\n\n        setField(prev => detectPatterns(prev.map(tile => {\n\n            if (tile.position === prevPosition) return ({\n                position: tile.position,\n                value: switchTile.value,\n                pointValue: switchTile.pointValue,\n                aboutToMove: tile.aboutToMove\n            });\n            if (tile.position === newPosition) return ({\n                position: tile.position,\n                value: currTile.value,\n                pointValue: currTile.pointValue,\n                aboutToMove: tile.aboutToMove\n            });\n            return tile;\n        })));\n\n    }\n\n\n    const handleChange = () => {\n\n        setTimeout(() => {\n            setField(prev => (detectPatterns(updateField(prev, removablePlasticList))));\n        }, 300);\n        console.log(\"CHANGED\");\n    };\n\n    useEffect(() => {\n\n        const points = sumPoints(detectPatterns(field), removablePlasticList);\n        \n        if (points > 0){\n            dispatch(resultsActions.increaseScore(points));\n            setTimeout(() => {\n                setField(prev => (detectPatterns(updateField(prev, removablePlasticList))));\n            }, 300);\n        }\n\n    },[field, dispatch, removablePlasticList]);\n\n    useEffect(() => {\n        if (isGameOn) setField(generateField(removablePlasticList));\n    }, [isGameOn, removablePlasticList]);\n    \n    return (<div className={styles.gameField} >\n            {(!isGameOn || isPaused) && <ShowMessage />}\n            {field.map(tile => <Tile \n            key={`tile${tile.position}`} \n            position={tile.position} \n            tileValue={tile.value} \n            aboutToMove={tile.aboutToMove}\n            tileState={tile.pointValue > 0 && removablePlasticList.includes(tile.value) ? tileStates[2] : tileStates[0]}\n            onSwitch={handlePositionSwitch}\n            onMouseUp={handleChange}\n            />)}\n        </div>);\n};\n\nexport default GameField;","import styles from './Plastic3Match.module.scss';\nimport Header from '../Header/Header';\nimport GameField from '../GameField/GameField';\n\n\nconst Plastic3Match = () => {\n\n    return (\n        <div className={styles.gameBoard}>\n            <Header />\n            <GameField />\n        </div>\n    );\n\n};\n\nexport default Plastic3Match;","import ReactPlayer from 'react-player/lazy';\nimport styles from './VideoBackground.module.scss';\n\nconst VideoBackground = () => {//  autoPlay={true} muted={true} loop={true} \n    return <ReactPlayer className={styles.myVideo} width={null} height={null} playing={true} muted={true} loop={true}  url='videos/underwater-vladimir-koshenkov.mp4'/>;\n};\n\nexport default VideoBackground;"," import styles from './App.module.scss';\nimport Plastic3match from './components/Plastic3match/Plastic3Match';\nimport VideoBackground from './components/VideoBackground/VideoBackground';\n\nfunction App() {\n\n  return (\n    <>\n      <div className={styles.App}>\n        <Plastic3match />\n      </div>\n      <VideoBackground />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}